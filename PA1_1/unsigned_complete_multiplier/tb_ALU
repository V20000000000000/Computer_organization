`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2024/03/28 20:42:05
// Design Name: 
// Module Name: tb_ALU
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description:  test ALU.v function
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module tb_ALU;

    reg [31:0] src1, src2;
    reg [5:0] funct;
    wire [31:0] result;
    wire carry;

    // Instantiate the ALU module
    ALU uut (
        .result(result),
        .carry(carry),
        .src1(src1),
        .src2(src2),
        .funct(funct)
    );

    // Initial block to apply test cases
    initial begin
        // Test case 1: Addition
        src1 = 32'hFFFFFFFF;
        src2 = 32'd50;
        funct = 6'b001001;
        #10; // Delay to allow ALU to compute
        $display("Test case 1: Addition");
        $display("src1 = %d, src2 = %d, result = %d, carry = %b", src1, src2, result, carry);
        
        src1 = 32'd50;
        src2 = 32'd10;
        funct = 6'b000000;
        #10; // Delay to allow ALU to compute
        $display("Test case 2: No operation");
        $display("src1 = %d, src2 = %d, result = %d, carry = %b", src1, src2, result, carry);
        
        src1 = 32'h0000FFFF;
        src2 = 32'd50;
        funct = 6'b001001;
        #10; // Delay to allow ALU to compute
        $display("Test case 1: Addition");
        $display("src1 = %d, src2 = %d, result = %d, carry = %b", src1, src2, result, carry);
        
        // Test case 2: No operation (default)
        src1 = 32'd50;
        src2 = 32'd10;
        funct = 6'b000000;
        #10; // Delay to allow ALU to compute
        $display("Test case 2: No operation");
        $display("src1 = %d, src2 = %d, result = %d, carry = %b", src1, src2, result, carry);
        
        // Add more test cases as needed
        
        // Stop simulation
        $stop;
    end

endmodule


